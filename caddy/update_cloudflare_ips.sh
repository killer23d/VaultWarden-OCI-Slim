#!/usr/bin/env bash
# /caddy/update_cloudflare_ips.sh
# This script fetches Cloudflare's IP ranges and generates configuration files
# for Caddy and Fail2ban. It only reloads services if the IP lists have changed.

set -e
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# --- Define File Paths ---
CADDY_CONFIG_FILE="${SCRIPT_DIR}/cloudflare_ips.caddy"
FAIL2BAN_IP_LIST_FILE="${SCRIPT_DIR}/cloudflare_ips.txt"

# --- Define Temporary File Paths for Comparison ---
CADDY_TEMP_FILE=$(mktemp)
FAIL2BAN_TEMP_FILE=$(mktemp)
trap 'rm -f "$CADDY_TEMP_FILE" "$FAIL2BAN_TEMP_FILE"' EXIT

# --- Fetch IP Ranges ---
echo "Fetching Cloudflare IP ranges..."
CLOUDFLARE_IPS_V4=$(curl -s https://www.cloudflare.com/ips-v4)
CLOUDFLARE_IPS_V6=$(curl -s https://www.cloudflare.com/ips-v6)

# --- Generate NEW Caddy and Fail2ban Files ---
{
  echo "# Generated by update_cloudflare_ips.sh on $(date)"
  echo "@cloudflare {"
  echo "  remote_ip $(echo $CLOUDFLARE_IPS_V4 $CLOUDFLARE_IPS_V6)"
  echo "}"
} > "$CADDY_TEMP_FILE"

{
  echo "# Generated by update_cloudflare_ips.sh on $(date)"
  echo "$CLOUDFLARE_IPS_V4"
  echo "$CLOUDFLARE_IPS_V6"
} > "$FAIL2BAN_TEMP_FILE"

# --- Compare and Conditionally Update/Reload ---
CHANGES_DETECTED=false

if ! cmp -s "$CADDY_TEMP_FILE" "$CADDY_CONFIG_FILE"; then
  echo "Change detected in Caddy IP list. Updating file..."
  mv "$CADDY_TEMP_FILE" "$CADDY_CONFIG_FILE"
  CHANGES_DETECTED=true
else
  echo "No changes to Caddy IP list."
fi

if ! cmp -s "$FAIL2BAN_TEMP_FILE" "$FAIL2BAN_IP_LIST_FILE"; then
  echo "Change detected in Fail2ban IP list. Updating file..."
  mv "$FAIL2BAN_TEMP_FILE" "$FAIL2BAN_IP_LIST_FILE"
  CHANGES_DETECTED=true
else
  echo "No changes to Fail2ban IP list."
fi

# --- Trigger Reloads ONLY if changes were made ---
if [ "$CHANGES_DETECTED" = true ]; then
  echo "IP lists updated. Reloading services if they are running..."

  # Check if Caddy container is running before reloading
  if docker ps --format '{{.Names}}' | grep -q "^bw_caddy$"; then
    if /usr/bin/docker exec bw_caddy caddy reload; then
      echo "Caddy reloaded successfully."
    else
      # Exit with an error only if the reload fails on a running container
      echo "ERROR: Failed to reload Caddy." >&2; exit 1
    fi
  else
    echo "Caddy container is not running, skipping reload. It will load the new IPs on startup."
  fi

  # Check if Fail2ban container is running before reloading
  if docker ps --format '{{.Names}}' | grep -q "^bw_fail2ban$"; then
    if /usr/bin/docker exec bw_fail2ban fail2ban-client reload; then
      echo "Fail2ban reloaded successfully."
    else
      # Exit with an error only if the reload fails on a running container
      echo "ERROR: Failed to reload Fail2ban." >&2; exit 1
    fi
  else
    echo "Fail2ban container is not running, skipping reload. It will load the new IPs on startup."
  fi
  
  echo "Service reload check complete."
else
  echo "No changes detected. Services were not reloaded."
fi

echo "IP update check complete."
