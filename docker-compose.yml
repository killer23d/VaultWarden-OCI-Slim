version: "3.8"

services:
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    user: "${PUID:-1000}:${PGID:-1000}"
    env_file:
      # Use temp env from startup.sh if provided, else fallback to repo file
      - ${COMPOSE_ENV_FILE:-./settings.env}
    volumes:
      - ./data/bwdata:/data:rw
    networks:
      - bw_net
    healthcheck:
      # Enhanced: Support both curl and wget for different VaultWarden images
      test: ["CMD-SHELL", "(command -v curl >/dev/null 2>&1 && curl -fsS http://127.0.0.1:80/alive) || (command -v wget >/dev/null 2>&1 && wget -qO- http://127.0.0.1:80/alive) || exit 1"]
      interval: 5m
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.35'  # Optimized for 1.0 CPU total
        reservations:
          memory: 128M
          cpus: '0.175'
    environment:
      # BEST PRACTICE: Single source of truth - require all variables from settings.env
      - DATABASE_URL=${DATABASE_URL:?DATABASE_URL must be set in settings.env}
      - ROCKET_WORKERS=${ROCKET_WORKERS:-1}
      - WEBSOCKET_ENABLED=${WEBSOCKET_ENABLED:-false}
      - EXTENDED_LOGGING=${EXTENDED_LOGGING:-true}
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      # VaultWarden configuration - all from settings.env
      - ADMIN_TOKEN=${ADMIN_TOKEN:?ADMIN_TOKEN must be set in settings.env}
      - SIGNUPS_ALLOWED=${SIGNUPS_ALLOWED:-false}
      - INVITES_ALLOWED=${INVITES_ALLOWED:-true}
      - WEB_VAULT_ENABLED=${WEB_VAULT_ENABLED:-true}
      - SHOW_PASSWORD_HINTS=${SHOW_PASSWORD_HINTS:-false}
      - DISABLE_2FA_REMEMBER=${DISABLE_2FA_REMEMBER:-false}
      # SMTP Configuration - optional but validated if provided
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_FROM=${SMTP_FROM:-}
      - SMTP_FROM_NAME=${SMTP_FROM_NAME:-}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_SECURITY=${SMTP_SECURITY:-starttls}
      - SMTP_PORT=${SMTP_PORT:-587}
      # Push Notifications - optional
      - PUSH_ENABLED=${PUSH_ENABLED:-true}
      - PUSH_INSTALLATION_ID=${PUSH_INSTALLATION_ID:-}
      - PUSH_INSTALLATION_KEY=${PUSH_INSTALLATION_KEY:-}
      - PUSH_RELAY_URI=${PUSH_RELAY_URI:-https://push.bitwarden.com}
      # Domain Configuration
      - DOMAIN=${DOMAIN:?DOMAIN must be set in settings.env}
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=vaultwarden"

  bw_caddy:
    image: caddy:2-alpine
    container_name: bw_caddy
    restart: unless-stopped
    user: "${PUID:-1000}:${PGID:-1000}"
    env_file:
      - ${COMPOSE_ENV_FILE:-./settings.env}
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./data/caddy_data:/data
      - ./data/caddy_config:/config
      - ./data/caddy_logs:/logs
      - ./caddy/cloudflare_ips.caddy:/etc/caddy/cloudflare_ips.caddy:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      vaultwarden:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "caddy validate --config /etc/caddy/Caddyfile || exit 1"]
      interval: 10m
      timeout: 15s
      retries: 3
      start_period: 45s
    networks:
      - bw_net
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.12'  # Optimized for 1.0 CPU total
        reservations:
          memory: 64M
          cpus: '0.06'
    environment:
      # Caddy-specific environment variables
      - CADDY_ADMIN=${CADDY_ADMIN:-off}
      - ADMIN_EMAIL=${ADMIN_EMAIL:?ADMIN_EMAIL must be set in settings.env}
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=caddy"

  bw_fail2ban:
    image: lscr.io/linuxserver/fail2ban:latest
    container_name: bw_fail2ban
    restart: unless-stopped
    env_file:
      - ${COMPOSE_ENV_FILE:-./settings.env}
    volumes:
      - ./fail2ban/jail.d/jail.local:/config/jail.local:ro
      - ./fail2ban/filter.d:/config/filter.d:ro
      - ./caddy/cloudflare_ips.txt:/config/cloudflare_ips.txt:ro
      - ./data/caddy_logs:/logs/caddy:ro
      - ./data/bwdata:/logs/vaultwarden:ro
      - ./data/fail2ban:/config:rw
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - VERBOSITY=-vv
      - TZ=${TZ:-UTC}
    healthcheck:
      test: ["CMD-SHELL", "fail2ban-client ping >/dev/null 2>&1 || exit 1"]
      interval: 15m
      timeout: 15s
      retries: 3
      start_period: 90s
    networks:
      - bw_net
    depends_on:
      bw_caddy:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.08'
        reservations:
          memory: 32M
          cpus: '0.04'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=fail2ban"
    profiles:
      - security

  bw_ddclient:
    image: lscr.io/linuxserver/ddclient:latest
    container_name: bw_ddclient
    restart: unless-stopped
    env_file:
      - ${COMPOSE_ENV_FILE:-./settings.env}
    volumes:
      - ./ddclient:/config:rw
    healthcheck:
      test: |
        CMD-SHELL '
        if [ -z "$DDCLIENT_HOST" ] || [ -z "$DDCLIENT_PASSWORD" ]; then
          echo "DDClient not configured - missing required variables"
          exit 1
        fi
        pgrep -f ddclient >/dev/null || exit 1
        '
      interval: 60m
      timeout: 15s
      retries: 2
      start_period: 60s
    networks:
      - bw_net
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-UTC}
      # DDClient configuration - validated in healthcheck
      - DDCLIENT_PROTOCOL=${DDCLIENT_PROTOCOL:-}
      - DDCLIENT_LOGIN=${DDCLIENT_LOGIN:-}
      - DDCLIENT_PASSWORD=${DDCLIENT_PASSWORD:-}
      - DDCLIENT_ZONE=${DDCLIENT_ZONE:-}
      - DDCLIENT_HOST=${DDCLIENT_HOST:-}
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: '0.05'
        reservations:
          memory: 16M
          cpus: '0.025'
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=ddclient"
    profiles:
      - dns

  bw_backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    image: bitwarden_sqlite_backup:latest
    container_name: bw_backup
    restart: unless-stopped
    user: "${PUID:-1000}:${PGID:-1000}"
    env_file:
      - ${COMPOSE_ENV_FILE:-./settings.env}
    volumes:
      - ./data/backups:/backups:rw
      - ./data/backup_logs:/var/log/backup:rw
      - ./backup/config:/home/backup/.config/rclone:rw
      - ./data/bwdata:/data/bwdata:ro
    networks:
      - bw_net
    depends_on:
      vaultwarden:
        condition: service_healthy
    healthcheck:
      test: |
        CMD-SHELL '
        # CRITICAL: Fail if rclone config missing or empty
        if [ ! -f /home/backup/.config/rclone/rclone.conf ] || [ ! -s /home/backup/.config/rclone/rclone.conf ]; then
          echo "❌ rclone.conf not found or empty - backup not configured"
          exit 1
        fi

        # CRITICAL: Fail if BACKUP_REMOTE not set
        if [ -z "$BACKUP_REMOTE" ]; then
          echo "❌ BACKUP_REMOTE not set"
          exit 1
        fi

        # CRITICAL: Verify remote exists in rclone config
        if ! rclone listremotes --config /home/backup/.config/rclone/rclone.conf | grep -q "^$BACKUP_REMOTE$"; then
          echo "❌ Backup remote $BACKUP_REMOTE not found in rclone.conf"
          exit 1
        fi

        # Check if cron daemon is running and backup directory is writable
        pgrep crond >/dev/null && test -w /backups || exit 1
        '
      interval: 60m
      timeout: 30s
      retries: 3
      start_period: 120s
    environment:
      # BEST PRACTICE: Require critical backup variables
      - BACKUP_DIR=/backups
      - LOG_DIR=/var/log/backup
      - RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_PASSPHRASE=${BACKUP_PASSPHRASE:?BACKUP_PASSPHRASE must be set for backup encryption}
      - BACKUP_REMOTE=${BACKUP_REMOTE:?BACKUP_REMOTE must be set to enable backups}
      - BACKUP_PATH=${BACKUP_PATH:-vaultwarden-backups}
      - BACKUP_EMAIL=${BACKUP_EMAIL:-}
      - DATABASE_TYPE=sqlite
      # Standardized paths - consistent with settings.env
      - SQLITE_DB_PATH=/data/bwdata/db.sqlite3
      - VAULTWARDEN_DATA_DIR=/data/bwdata
      # Additional backup configuration
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_COMPRESS=${BACKUP_COMPRESS:-true}
      - BACKUP_ENCRYPT=${BACKUP_ENCRYPT:-true}
      - BACKUP_VERIFICATION=${BACKUP_VERIFICATION:-true}
      - BACKUP_NOTIFY=${BACKUP_NOTIFY:-true}
      - BACKUP_NOTIFY_ON=${BACKUP_NOTIFY_ON:-all}
      - RCLONE_TRANSFER_TIMEOUT=${RCLONE_TRANSFER_TIMEOUT:-30m}
      - RCLONE_RETRIES=${RCLONE_RETRIES:-3}
      - TZ=${TZ:-UTC}
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.30'  # Optimized for 1.0 CPU total
        reservations:
          memory: 64M
          cpus: '0.15'
    profiles:
      - backup
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=sqlite-backup"

  bw_watchtower:
    image: containrrr/watchtower:latest
    restart: unless-stopped
    container_name: bw_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=${WATCHTOWER_SCHEDULE:-0 0 3 * * 0}
      - TZ=${TZ:-UTC}
      - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_REVIVE_STOPPED=false
      - WATCHTOWER_LABEL_ENABLE=true
      # Email notifications (optional)
      - WATCHTOWER_NOTIFICATIONS=${WATCHTOWER_NOTIFICATIONS:-false}
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${SMTP_FROM:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${ALERT_EMAIL:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_HOST:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT:-587}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USERNAME:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD:-}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - bw_net
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.10'  # Optimized for 1.0 CPU total
        reservations:
          memory: 32M
          cpus: '0.05'
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=watchtower"
    profiles:
      - maintenance

  bw_monitoring:
    image: alpine:3.20
    container_name: bw_monitoring
    restart: unless-stopped
    env_file:
      - ${COMPOSE_ENV_FILE:-./settings.env}
    volumes:
      - ./monitor.sh:/app/monitor.sh:ro
      - ./alerts.sh:/app/alerts.sh:ro
      - ./perf-monitor.sh:/app/perf-monitor.sh:ro
      - ./lib:/app/lib:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - bw_net
    healthcheck:
      test: |
        CMD-SHELL '
        # CRITICAL: Verify monitoring configuration
        if [ -z "$ALERT_EMAIL" ] && [ -z "$WEBHOOK_URL" ]; then
          echo "❌ No alert destinations configured - monitoring disabled"
          exit 1
        fi

        # Check if cron is running
        pgrep crond >/dev/null || exit 1
        '
      interval: 30m
      timeout: 15s
      retries: 3
      start_period: 60s
    environment:
      - TZ=${TZ:-UTC}
      # INTEGRATED MONITORING THRESHOLDS (from unused config files)
      - DISK_ALERT_THRESHOLD=${DISK_ALERT_THRESHOLD:-85}
      - CPU_ALERT_THRESHOLD=${CPU_ALERT_THRESHOLD:-80}
      - MEMORY_ALERT_THRESHOLD=${MEMORY_ALERT_THRESHOLD:-85}
      - LOAD_ALERT_THRESHOLD=${LOAD_ALERT_THRESHOLD:-2.0}
      # SQLite-specific monitoring (from config/sqlite-thresholds.conf)
      - SQLITE_SIZE_ALERT_MB=${SQLITE_SIZE_ALERT_MB:-100}
      - WAL_SIZE_ALERT_MB=${WAL_SIZE_ALERT_MB:-10}
      - FRAGMENTATION_ALERT_RATIO=${FRAGMENTATION_ALERT_RATIO:-1.5}
      - FREELIST_ALERT_THRESHOLD=${FREELIST_ALERT_THRESHOLD:-15}
      # Alert configuration
      - ALERT_EMAIL=${ALERT_EMAIL:-}
      - WEBHOOK_URL=${WEBHOOK_URL:-}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM=${SMTP_FROM:-}
      # Log management
      - LOG_RETENTION_DAYS=${LOG_RETENTION_DAYS:-30}
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: '0.05'
        reservations:
          memory: 16M
          cpus: '0.025'
    command: |
      sh -c '
        # Install required packages
        apk add --no-cache bash curl jq bc sysstat docker-cli sqlite &&

        # Create monitoring crontab with integrated thresholds
        echo "*/5 * * * * /app/monitor.sh --check >/dev/null 2>&1" > /tmp/monitoring.cron &&
        echo "0 * * * * /app/alerts.sh --hourly >/dev/null 2>&1" >> /tmp/monitoring.cron &&
        echo "*/15 * * * * /app/perf-monitor.sh --collect >/dev/null 2>&1" >> /tmp/monitoring.cron &&

        # Install crontab and start cron
        crontab /tmp/monitoring.cron &&
        crond -f -l 8
      '
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=monitoring"

networks:
  bw_net:
    driver: bridge
    name: vaultwarden_network

# ==============================================
# VaultWarden-OCI-Slim SQLite Configuration
# Optimized for 1 OCPU/6GB OCI A1 Flex
# ==============================================
# 
# Resource Allocation Summary:
# - VaultWarden: 0.35 CPU, 256MB RAM
# - Caddy:       0.12 CPU, 128MB RAM  
# - Fail2ban:    0.08 CPU, 64MB RAM
# - Backup:      0.30 CPU, 128MB RAM
# - Watchtower:  0.10 CPU, 64MB RAM
# - DDClient:    0.05 CPU, 32MB RAM
# Total:         1.00 CPU, 672MB RAM
#
# BEST PRACTICES IMPLEMENTED:
# ✓ Single source of truth for configuration (settings.env)
# ✓ Required variables use ${VAR:?message} syntax
# ✓ Service-specific validation in healthchecks
# ✓ Monitoring service only enabled when configured
# ✓ Backup service validates rclone configuration
# ✓ DDClient validates required variables
# ✓ Clear error messages for missing configuration
# ✓ INTEGRATED monitoring thresholds (no more disconnected variables)
# ✓ FAIL-FAST healthchecks (no silent failures)
#
# Profile Usage Examples:
# docker compose up -d                           # Core services only
# docker compose --profile backup up -d         # Core + backup (if configured)
# docker compose --profile security up -d       # Core + fail2ban  
# docker compose --profile dns up -d            # Core + ddclient (if configured)
# docker compose --profile maintenance up -d    # Core + watchtower
# docker compose --profile monitoring up -d     # Core + monitoring (if configured)
# ./startup.sh                                  # Automatic profile selection with validation
